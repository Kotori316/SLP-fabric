plugins {
    id("scala")
    id("maven-publish")
    alias(libs.plugins.loom)
    alias(libs.plugins.publish.all)
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "Main"
        url = uri("https://maven.kotori316.com")
        content {
            includeVersion("org.typelevel", "cats-core_3", libs.versions.cats.get())
            includeVersion("org.typelevel", "cats-kernel_3", libs.versions.cats.get())
            includeVersion("org.typelevel", "cats-free_3", libs.versions.cats.get())
        }
    }
}

dependencies {
    minecraft(libs.minecraft.main)
    mappings(loom.officialMojangMappings())
    modImplementation(libs.fabric.loader)
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(api(group: "org.scala-lang", name: "scala3-library_3", version: libs.versions.scala3.get()))
    include(api(group: "org.scala-lang", name: "scala-library", version: libs.versions.scala2.get()))
    include(api(group: "org.typelevel", name: "cats-core_3", version: libs.versions.cats.get()))
    include(api(group: "org.typelevel", name: "cats-kernel_3", version: libs.versions.cats.get()))
    include(api(group: "org.typelevel", name: "cats-free_3", version: libs.versions.cats.get()))
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.named("wrapper", Wrapper) {
    it.gradleVersion = "8.10.1"
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

final boolean RELEASE_DEBUG = (System.getenv("RELEASE_DEBUG") ?: "true").toBoolean()

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(tasks.jar)
            artifactId = project.archives_base_name
            pom {
                name = project.archives_base_name
                description = "SLP for Minecraft with Fabric"
                url = project.url
                packaging = "jar"
                withXml {
                    List<String> notRequiredArtifacts = ["fabric-loader", "fabric-api"]
                    def pomNode = asNode() as Node
                    pomNode.dependencies."*".findAll() { Node node ->
                        def valueList = node.value() as NodeList
                        String artifactId = ((valueList.get(1) as Node).value() as NodeList).get(0)
                        if (notRequiredArtifacts.stream().anyMatch { artifactId.contains(it) })
                            node.parent().remove(node)
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        def u = project.findProperty("maven_username") as String ?: System.getenv("MAVEN_USERNAME") ?: ""
        def p = project.findProperty("maven_password") as String ?: System.getenv("MAVEN_PASSWORD") ?: ""
        if (u != "" && p != "" && !RELEASE_DEBUG) {
            maven {
                name = "kotori316-maven"
                // For users: Use https://maven.kotori316.com to get artifacts
                url = uri("https://maven2.kotori316.com/production/maven")
                credentials {
                    username = u
                    password = p
                }
            }
        }
        if (System.getenv("CI") == null) {
            maven {
                name = "MavenTestGCP"
                url = uri("gcs://kotori316-maven-test-storage/maven/")
            }
        }
    }
}

String createChangelog() {
    return """\
## Scalable Cat's Force Fabric

Provides scala language adapter to Fabric.

### Build dependencies:

- Scala ${libs.versions.scala2.get()}
- Scala3 ${libs.versions.scala3.get()}
- Cats Kernel ${libs.versions.cats.get()}
- Cats Core ${libs.versions.cats.get()}
- Cats Free ${libs.versions.cats.get()}
- Fabric Loader ${libs.versions.fabric.loader.get()}

### Repositry

${project.url}/tree/${project.branch}
"""
}

publishMods {
    dryRun = RELEASE_DEBUG
    type = STABLE
    file = provider { tasks.remapJar }.flatMap { it.archiveFile }
    additionalFiles = files(
            provider { tasks.jar }.flatMap { it.archiveFile },
            provider { tasks.sourcesJar }.flatMap { it.archiveFile },
    )
    modLoaders = ["fabric"]
    displayName = "${project.version}-fabric"
    changelog = createChangelog()

    def endVersion = "1.21.1"
    curseforge {
        accessToken = (project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSEFORGE_API_KEY") ?: "") as String
        projectId = "320926"
        minecraftVersionRange {
            start = libs.versions.minecraft.main.get()
            end = endVersion
        }
    }
    modrinth {
        accessToken = (project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String
        projectId = "scalable-cats-force"
        minecraftVersionRange {
            start = libs.versions.minecraft.main.get()
            end = endVersion
            includeSnapshots = false
        }
    }
    github {
        accessToken = (project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: "") as String
        repository = "Kotori316/SLP-fabric"
        commitish = project.property("branch") as String
        tagName = "v${project.version}"
    }
}
