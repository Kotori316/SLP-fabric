plugins {
    id("scala")
    id("maven-publish")
    id("fabric-loom").version("1.7.4")
    id("com.github.breadmoirai.github-release").version("2.5.2")
    id("com.matthewprenger.cursegradle").version("1.4.0")
    id("com.modrinth.minotaur").version("2.+")
}

archivesBaseName = project.archives_base_name
version = project.mod_version
group = project.maven_group

repositories {
    maven {
        name = "Main"
        url = uri("https://maven.kotori316.com")
        content {
            includeVersion("org.typelevel", "cats-core_3", project.catsVersion)
            includeVersion("org.typelevel", "cats-kernel_3", project.catsVersion)
            includeVersion("org.typelevel", "cats-free_3", project.catsVersion)
        }
    }
}

dependencies {
    minecraft("com.mojang:minecraft:${project.minecraft_version}")
    mappings loom.officialMojangMappings()
    modImplementation("net.fabricmc:fabric-loader:${project.loader_version}")
    // modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"

    include(api(group: "org.scala-lang", name: "scala3-library_3", version: project.scala3Version))
    include(api(group: "org.scala-lang", name: "scala-library", version: project.scala2Version))
    include(api(group: "org.typelevel", name: "cats-core_3", version: project.catsVersion))
    include(api(group: "org.typelevel", name: "cats-kernel_3", version: project.catsVersion))
    include(api(group: "org.typelevel", name: "cats-free_3", version: project.catsVersion))
}

processResources {
    inputs.property("version", project.version)

    filesMatching("fabric.mod.json") {
        expand("version": project.version)
    }
}

java {
    withSourcesJar()
    toolchain {
        languageVersion = JavaLanguageVersion.of(8)
    }
}

jar {
    from("LICENSE") {
        rename { "${it}_${project.archivesBaseName}" }
    }
}

tasks.named("wrapper", Wrapper) {
    it.gradleVersion = "8.10.1"
}

tasks.withType(GenerateModuleMetadata).configureEach {
    enabled = false
}

final boolean RELEASE_DEBUG = true

// configure the maven publication
publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java
            artifact(tasks.jar)
            artifactId = project.archives_base_name
            pom {
                name = project.archives_base_name
                description = "SLP for Minecraft with Fabric"
                url = project.url
                packaging = "jar"
                withXml {
                    List<String> notRequiredArtifacts = ["fabric-loader", "fabric-api"]
                    def pomNode = asNode() as Node
                    pomNode.dependencies."*".findAll() { Node node ->
                        def valueList = node.value() as NodeList
                        String artifactId = ((valueList.get(1) as Node).value() as NodeList).get(0)
                        if (notRequiredArtifacts.stream().anyMatch { artifactId.contains(it) })
                            node.parent().remove(node)
                    }
                }
            }
        }
    }

    // See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
    repositories {
        def u = project.findProperty("maven_username") as String ?: System.getenv("MAVEN_USERNAME") ?: ""
        def p = project.findProperty("maven_password") as String ?: System.getenv("MAVEN_PASSWORD") ?: ""
        if (u != "" && p != "" && !RELEASE_DEBUG) {
            maven {
                name = "kotori316-maven"
                // For users: Use https://maven.kotori316.com to get artifacts
                url = uri("https://maven2.kotori316.com/production/maven")
                credentials {
                    username = u
                    password = p
                }
            }
        }
        if (System.getenv("CI") == null) {
            maven {
                name = "MavenTestGCP"
                url = uri("gcs://kotori316-maven-test-storage/maven/")
            }
        }
    }
}

String createChangelog() {
    return """\
## Scalable Cat's Force Fabric

Provides scala language adapter to Fabric.

### Build dependencies:

- Scala ${project.scala2Version}
- Scala3 ${project.scala3Version}
- Cats Kernel ${project.catsVersion}
- Cats Core ${project.catsVersion}
- Cats Free ${project.catsVersion}
- Fabric Loader ${project.loader_version}

### Repositry

${project.url}/tree/${project.branch}
"""
}

curseforge {
    apiKey = project.findProperty("curseforge_additional-enchanted-miner_key") ?: System.getenv("CURSEFORGE_API_KEY") ?: ""
    project {
        id = "320926"
        changelogType = "markdown"
        changelog = project.createChangelog()
        releaseType = "release"
        addGameVersion("Fabric")
        addGameVersion(project.minecraft_version)
        mainArtifact(tasks.remapJar) {
            displayName = "${project.version}-fabric"
        }
        addArtifact(tasks.jar)
        addArtifact(tasks.sourcesJar)
    }
    options {
        curseGradleOptions.debug = RELEASE_DEBUG // defaults to false
        javaVersionAutoDetect = false
        forgeGradleIntegration = false
    }
}

githubRelease {
    repo.set("SLP-fabric")
    token = project.findProperty("githubToken") ?: System.getenv("REPO_TOKEN") ?: ""
    targetCommitish.set(project.branch as String)
    prerelease.set(project.version.toString().contains("SNAPSHOT"))
    body.set(project.createChangelog())
    releaseAssets = files(
            tasks.remapJar,
            tasks.jar,
            tasks.sourcesJar,
    )
    dryRun.set(RELEASE_DEBUG)
}

modrinth {
    token.set((project.findProperty("modrinthToken") ?: System.getenv("MODRINTH_TOKEN") ?: "") as String)
    projectId = "scalable-cats-force"
    versionType = "release"
    versionName = "${project.version}-fabric"
    uploadFile = tasks.remapJar
    getAdditionalFiles().set([
            tasks.jar,
            tasks.sourcesJar,
    ])
    getGameVersions().set([project.minecraft_version])
    getLoaders().set(["fabric"])
    changelog = project.createChangelog()
    debugMode = RELEASE_DEBUG
}
